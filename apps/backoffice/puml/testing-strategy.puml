@startuml Testing Strategy
!theme plain
skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle

title Testing Strategy Architecture

package "Testing Pyramid" as TestingPyramid {
  class "E2E Tests" as E2ETests {
    + Cypress
    + Full user workflows
    + Browser automation
    + Integration testing
  }
  
  class "Integration Tests" as IntegrationTests {
    + React Testing Library
    + Hook testing
    + Component integration
    + API integration
  }
  
  class "Unit Tests" as UnitTests {
    + Vitest
    + Use case testing
    + Service testing
    + Utility testing
  }
}

package "Unit Tests" as UnitTestDetails {
  class "Use Case Tests" as UseCaseTests {
    + Mock dependencies
    + Test business logic
    + Test validation rules
    + Test error handling
  }
  
  class "Service Tests" as ServiceTests {
    + Mock API calls
    + Test data transformation
    + Test error handling
    + Test retry logic
  }
  
  class "Hook Tests" as HookTests {
    + Mock React Query
    + Test state management
    + Test side effects
    + Test error states
  }
  
  class "Utility Tests" as UtilityTests {
    + Test pure functions
    + Test data validation
    + Test formatting
    + Test calculations
  }
}

package "Integration Tests" as IntegrationTestDetails {
  class "Component Tests" as ComponentTests {
    + Render components
    + Test user interactions
    + Test props handling
    + Test state updates
  }
  
  class "Hook Integration Tests" as HookIntegrationTests {
    + Test hook combinations
    + Test data flow
    + Test state synchronization
    + Test error propagation
  }
  
  class "API Integration Tests" as APIIntegrationTests {
    + Test real API calls
    + Test authentication
    + Test error responses
    + Test data consistency
  }
}

package "E2E Tests" as E2ETestDetails {
  class "User Workflow Tests" as WorkflowTests {
    + Login workflow
    + User approval workflow
    + Dashboard navigation
    + Error handling flows
  }
  
  class "Cross-Browser Tests" as CrossBrowserTests {
    + Chrome testing
    + Firefox testing
    + Safari testing
    + Mobile testing
  }
  
  class "Performance Tests" as PerformanceTests {
    + Load time testing
    + Memory usage testing
    + Network performance
    + User experience testing
  }
}

package "Test Utilities" as TestUtilities {
  class "Mock Factories" as MockFactories {
    + createMockUser()
    + createMockAuthResponse()
    + createMockApiError()
    + createMockUseCase()
  }
  
  class "Test Helpers" as TestHelpers {
    + renderWithProviders()
    + waitForQuery()
    + mockApiResponse()
    + simulateUserAction()
  }
  
  class "Test Data" as TestData {
    + User fixtures
    + API response fixtures
    + Error fixtures
    + Edge case data
  }
}

package "Test Configuration" as TestConfig {
  class "Vitest Config" as VitestConfig {
    + Unit test setup
    + Mock configuration
    + Coverage settings
    + Test environment
  }
  
  class "Cypress Config" as CypressConfig {
    + E2E test setup
    + Browser configuration
    + Test data setup
    + CI/CD integration
  }
  
  class "Test Scripts" as TestScripts {
    + npm run test:unit
    + npm run test:integration
    + npm run test:e2e
    + npm run test:coverage
  }
}

' Test relationships
UnitTests --> UseCaseTests : includes
UnitTests --> ServiceTests : includes
UnitTests --> HookTests : includes
UnitTests --> UtilityTests : includes

IntegrationTests --> ComponentTests : includes
IntegrationTests --> HookIntegrationTests : includes
IntegrationTests --> APIIntegrationTests : includes

E2ETests --> WorkflowTests : includes
E2ETests --> CrossBrowserTests : includes
E2ETests --> PerformanceTests : includes

' Test utilities
UseCaseTests --> MockFactories : uses
ServiceTests --> MockFactories : uses
HookTests --> TestHelpers : uses
ComponentTests --> TestHelpers : uses
WorkflowTests --> TestData : uses

' Configuration
UnitTests --> VitestConfig : configured by
IntegrationTests --> VitestConfig : configured by
E2ETests --> CypressConfig : configured by

note right of UnitTests
  Unit Tests (70%):
  - Fast execution
  - Isolated testing
  - High coverage
  - Easy maintenance
end note

note right of IntegrationTests
  Integration Tests (20%):
  - Component interaction
  - Hook integration
  - API integration
  - State management
end note

note right of E2ETests
  E2E Tests (10%):
  - Full user workflows
  - Real browser testing
  - End-to-end validation
  - User experience testing
end note

note right of TestUtilities
  Test Utilities:
  - Mock data generation
  - Test helper functions
  - Reusable test components
  - Test data fixtures
end note

@enduml
