@startuml Use Case Pattern
!theme plain
skinparam backgroundColor #FFFFFF
skinparam componentStyle rectangle

title Use Case Pattern Implementation

package "Domain Layer" as Domain {
  interface "UserManagementUseCase" as IUserManagement {
    + getAllUsers(filters?: UserFilters): Promise<AdminUser[]>
    + approveUser(userId: string, data: UserApprovalRequest): Promise<AdminUser>
    + rejectUser(userId: string): Promise<AdminUser>
    + updateUser(userId: string, data: Partial<AdminUser>): Promise<AdminUser>
    + deleteUser(userId: string): Promise<void>
  }
}

package "Application Layer" as Application {
  class "UserManagementUseCaseImpl" as UserManagementImpl {
    - userService: IUserService
    + getAllUsers(filters?: UserFilters): Promise<AdminUser[]>
    + approveUser(userId: string, data: UserApprovalRequest): Promise<AdminUser>
    + rejectUser(userId: string): Promise<AdminUser>
    + updateUser(userId: string, data: Partial<AdminUser>): Promise<AdminUser>
    + deleteUser(userId: string): Promise<void>
    - validateFilters(filters?: UserFilters): UserFilters
    - validateApprovalData(data: UserApprovalRequest): void
  }
  
  class "UseCaseFactory" as Factory {
    - static userService: IUserService
    - static userManagementUseCase: UserManagementUseCase
    + static setUserService(service: IUserService): void
    + static getUserManagementUseCase(): UserManagementUseCase
    + static initialize(service: IUserService): void
  }
}

package "Infrastructure Layer" as Infrastructure {
  interface "IUserService" as IUserService {
    + getAllUsers(filters?: UserFilters): Promise<AdminUser[]>
    + approveUser(userId: string, data: UserApprovalRequest): Promise<AdminUser>
    + rejectUser(userId: string): Promise<AdminUser>
    + updateUser(userId: string, data: Partial<AdminUser>): Promise<AdminUser>
    + deleteUser(userId: string): Promise<void>
  }
  
  class "AdminUserService" as UserService {
    - apiService: ApiService
    + getAllUsers(filters?: UserFilters): Promise<AdminUser[]>
    + approveUser(userId: string, data: UserApprovalRequest): Promise<AdminUser>
    + rejectUser(userId: string): Promise<AdminUser>
    + updateUser(userId: string, data: Partial<AdminUser>): Promise<AdminUser>
    + deleteUser(userId: string): Promise<void>
  }
}

package "Presentation Layer" as Presentation {
  class "useUsers Hook" as UseUsersHook {
    + useUsers(filters?: UserFilters): UseQueryResult<AdminUser[]>
  }
  
  class "useUserApproval Hook" as UseUserApprovalHook {
    + useUserApproval(): UseMutationResult<AdminUser>
  }
}

' Relationships
UserManagementImpl ..|> IUserManagement : implements
UserManagementImpl --> IUserService : depends on
UserService ..|> IUserService : implements
Factory --> UserManagementImpl : creates
Factory --> UserService : manages

UseUsersHook --> Factory : uses
UseUserApprovalHook --> Factory : uses

' Dependency flow
note right of Domain
  Defines contracts
  for business operations
end note

note right of Application
  Implements business logic
  and validation rules
end note

note right of Infrastructure
  Handles external
  communication
end note

note right of Presentation
  React hooks that
  consume Use Cases
end note

@enduml
